{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/EventEmittable.ts", "../src/utils/applyMixins.ts", "../src/utils/mod.ts", "../src/BeatManager.ts", "../src/BufferReaderNode.ts", "../src/shaderchunks.ts", "../src/utils/lazyProgram.ts", "../src/Renderer.ts", "../src/TextureStore.ts", "../src/utils/lerp.ts", "../src/WavenerdDeck.ts"],
  "sourcesContent": ["export { WavenerdDeck } from './WavenerdDeck';\nexport { BeatManager } from './BeatManager';\n\nimport { WavenerdDeck } from './WavenerdDeck';\nexport default WavenerdDeck;\n", "// Ref: https://github.com/andywer/typed-emitter/blob/master/index.d.ts\n\nexport type EventListener<T> = ( event: T ) => void;\n\nexport class EventEmittable<TEvents extends { [ type: string ]: any }> {\n  protected __eventListeners?: Map<keyof TEvents, EventListener<any>[]>;\n\n  public on<TType extends keyof TEvents & string>(\n    type: TType,\n    listener: EventListener<TEvents[ TType ]>\n  ): EventListener<TEvents[ TType ]> {\n    this.__eventListeners = this.__eventListeners || new Map();\n    let array = this.__eventListeners.get( type );\n    if ( !array ) {\n      array = [];\n      this.__eventListeners.set( type, array );\n    }\n\n    array.push( listener );\n\n    return listener;\n  }\n\n  public off<TType extends keyof TEvents & string>(\n    type: TType,\n    listener: EventListener<TEvents[ TType ]>\n  ): void {\n    this.__eventListeners = this.__eventListeners || new Map();\n    let array = this.__eventListeners.get( type );\n    if ( !array ) {\n      array = [];\n      this.__eventListeners.set( type, array );\n    }\n\n    const index = array.indexOf( listener );\n    if ( index !== -1 ) {\n      array.splice( index, 1 );\n    }\n  }\n\n  protected __emit<TType extends keyof TEvents>(\n    ...[ type, event ]: TEvents[ TType ] extends void ? [ TType ] : [ TType, TEvents[ TType ] ]\n  ): void {\n    this.__eventListeners = this.__eventListeners || new Map();\n    this.__eventListeners.get( type )?.forEach( ( listener ) => listener( event ) );\n  }\n}\n", "export function applyMixins( derivedCtor: any, baseCtors: any[] ): void {\n  baseCtors.forEach( ( baseCtor ) => {\n    Object.getOwnPropertyNames( baseCtor.prototype ).forEach( ( name ) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor( baseCtor.prototype, name )!\n      );\n    } );\n  } );\n}\n", "export function mod( value: number, divisor: number ): number {\n  return value - Math.floor( value / divisor ) * divisor;\n}\n", "import { EventEmittable } from './utils/EventEmittable';\nimport { applyMixins } from './utils/applyMixins';\nimport { mod } from './utils/mod';\n\nexport interface BeatManagerUpdateEvent {\n  time: number;\n  bpm: number;\n  beat: number;\n  bar: number;\n  sixteenBar: number;\n}\n\nexport class BeatManager {\n  public static CalcBeatSeconds( bpm: number ): number {\n    return 60.0 / bpm;\n  }\n\n  public static CalcBarSeconds( bpm: number ): number {\n    // return this.beatLength * 4.0;\n    return 240.0 / bpm;\n  }\n\n  public static CalcSixteenBarSeconds( bpm: number ): number {\n    // return this.barLength * 16.0;\n    return 3840.0 / bpm;\n  }\n\n  private __bpm = 140.0;\n  public get bpm(): number {\n    return this.__bpm;\n  }\n  public set bpm( value: number ) {\n    const prevBpm = this.__bpm;\n    this.__bpm = Math.max( 0.0, value );\n    this.__sixteenBar = this.__sixteenBar * prevBpm / this.__bpm;\n    this.__emit( 'changeBPM', { bpm: this.__bpm } );\n  }\n\n  public get beatSeconds(): number {\n    return BeatManager.CalcBeatSeconds( this.__bpm );\n  }\n\n  public get barSeconds(): number {\n    return BeatManager.CalcBarSeconds( this.__bpm );\n  }\n\n  public get sixteenBarSeconds(): number {\n    return BeatManager.CalcSixteenBarSeconds( this.__bpm );\n  }\n\n  private __time = 0.0;\n  public get time(): number {\n    return this.__time;\n  }\n\n  private __beat = 0.0;\n  public get beat(): number {\n    return this.__beat;\n  }\n\n  private __bar = 0.0;\n  public get bar(): number {\n    return this.__bar;\n  }\n\n  private __sixteenBar = 0.0;\n  public get sixteenBar(): number {\n    return this.__sixteenBar;\n  }\n\n  public reset(): void {\n    this.__time = 0.0;\n    this.__sixteenBar = 0.0;\n  }\n\n  public update( time: number ): BeatManagerUpdateEvent {\n    const beatSeconds = BeatManager.CalcBeatSeconds( this.__bpm );\n    const barSeconds = BeatManager.CalcBarSeconds( this.__bpm );\n    const sixteenBarSeconds = BeatManager.CalcSixteenBarSeconds( this.__bpm );\n\n    const delta = time - this.__time;\n\n    this.__sixteenBar = mod( this.__sixteenBar + delta, sixteenBarSeconds );\n    this.__bar = mod( this.__sixteenBar, barSeconds );\n    this.__beat = mod( this.__bar, beatSeconds );\n\n    this.__time = time;\n\n    const event = {\n      time,\n      bpm: this.__bpm,\n      beat: this.__beat,\n      bar: this.__bar,\n      sixteenBar: this.__sixteenBar,\n    };\n\n    this.__emit( 'update', event );\n\n    return event;\n  }\n}\n\nexport interface BeatManager extends EventEmittable<{\n  update: BeatManagerUpdateEvent;\n  changeBPM: { bpm: number };\n}> {}\napplyMixins( BeatManager, [ EventEmittable ] );\n", "import processorCode from './BufferReaderProcessor.worklet.js';\n\nconst BLOCK_SIZE = 128;\nconst CHANNELS = 2;\nconst BUFFER_SIZE_PER_CHANNEL = 65536;\n\nconst processorBlob = new Blob( [ processorCode ], { type: 'text/javascript' } );\nconst processorUrl = URL.createObjectURL( processorBlob );\n\nexport class BufferReaderNode extends AudioWorkletNode {\n  private __readBlocks: number;\n\n  public get readBlocks(): number {\n    return this.__readBlocks;\n  }\n\n  public static addModule( audio: AudioContext ): Promise<void> {\n    return audio.audioWorklet.addModule( processorUrl );\n  }\n\n  public setActive( isActive: boolean ): void {\n    this.port.postMessage( isActive );\n  }\n\n  public constructor( audio: AudioContext ) {\n    super( audio, 'buffer-reader-processor', {\n      numberOfInputs: 0,\n      numberOfOutputs: 1,\n      outputChannelCount: [ CHANNELS ],\n    } );\n\n    this.__readBlocks = 0;\n\n    this.port.onmessage = ( ( { data } ) => {\n      this.__readBlocks = data;\n    } );\n  }\n\n  public write( channel: number, block: number, offset: number, buffer: ArrayLike<number> ): void {\n    const totalOffset = (\n      BUFFER_SIZE_PER_CHANNEL * channel\n      + ( BLOCK_SIZE * block ) % BUFFER_SIZE_PER_CHANNEL\n      + offset\n    );\n    this.port.postMessage( [ buffer, totalOffset ] );\n  }\n}\n", "export const shaderchunkPre = `#version 300 es\n\nprecision highp float;\n\n#define _PI 3.14159265359\n\nuniform float bpm;\nuniform vec4 timeLength;\nuniform float sampleRate;\nuniform float _deltaSample;\nuniform vec4 _timeHead;\n\nin float off;\n\nout float outL;\nout float outR;\n\nfloat paramFetch( vec4 param ) {\n  return mix( param.x, param.y, exp( -param.z * off * _deltaSample ) );\n}\n\nfloat wavetableNearest( sampler2D w, vec4 meta, vec2 position ) {\n  vec2 uv0 = fract( vec2(\n    position.x,\n    ( floor( fract( position.y ) * ( meta.y - 1.0 ) ) + 0.5 ) / meta.y\n  ) );\n  vec2 uv1 = uv0 + vec2( 0.0, 1.0 / meta.y );\n  return mix(\n    texture( w, uv0 ).x,\n    texture( w, uv1 ).x,\n    fract( position.y * ( meta.y - 1.0 ) )\n  );\n}\n\nfloat wavetableSinc( sampler2D w, vec4 meta, vec2 position ) {\n  float sum = 0.0;\n  float def = -fract( position.x * meta.x );\n  for ( int i = -5; i <= 5; i ++ ) {\n    float x = floor( position.x * meta.x + float( i ) ) / meta.x;\n    float deft = def + float( i );\n    vec2 uv0 = fract( vec2(\n      x,\n      ( floor( fract( position.y ) * ( meta.y - 1.0 ) ) + 0.5 ) / meta.y\n    ) );\n    vec2 uv1 = uv0 + vec2( 0.0, 1.0 / meta.y );\n    sum += mix(\n      texture( w, uv0 ).x,\n      texture( w, uv1 ).x,\n      fract( position.y * ( meta.y - 1.0 ) )\n    ) * min( sin( deft * _PI ) / deft / _PI, 1.0 );\n  }\n  return sum;\n}\n\nvec2 sampleNearest( sampler2D s, vec4 meta, float time ) {\n  if ( meta.w < time ) { return vec2( 0.0 ); }\n  float x = time / meta.x * meta.z;\n  vec2 uv = fract( vec2(\n    x,\n    floor( x ) / meta.y\n  ) ) + 0.5 / meta.xy;\n  return texture( s, uv ).xy;\n}\n\nvec2 sampleSinc( sampler2D s, vec4 meta, float time ) {\n  if ( meta.w < time ) { return vec2( 0.0 ); }\n  vec2 sum = vec2( 0.0 );\n  float def = -fract( time * meta.z );\n  for ( int i = -5; i <= 5; i ++ ) {\n    float x = floor( time * meta.z + float( i ) ) / meta.x;\n    float deft = def + float( i );\n    vec2 uv = fract( vec2(\n      x,\n      floor( x ) / meta.y\n    ) ) + 0.5 / meta.xy;\n    sum += texture( s, uv ).xy * min( sin( deft * _PI ) / deft / _PI, 1.0 );\n  }\n  return sum;\n}\n`;\n\nexport const shaderchunkPreLines = shaderchunkPre.split( '\\n' ).length;\n\nexport const shaderchunkPost = `void main() {\n  vec2 out2 = mainAudio( mod( _timeHead + off * _deltaSample, timeLength ) );\n  outL = out2.x;\n  outR = out2.y;\n}`;\n", "export function lazyProgram(\n  gl: WebGL2RenderingContext,\n  vert: string,\n  frag: string,\n  options: {\n    /**\n     * `KHR_parallel_shader_compile`.\n     * Compile async if provided.\n     */\n    extParallel?: any,\n\n    tfVaryings?: string[],\n\n    /**\n     * `gl.SEPARATE_ATTRIBS` by default\n     */\n    tfBufferMode?: number,\n  } = {},\n): Promise<WebGLProgram> {\n  const { extParallel, tfVaryings, tfBufferMode } = options;\n\n  let vertexShader: WebGLShader | null = null;\n  let fragmentShader: WebGLShader | null = null;\n  let program: WebGLProgram | null = null;\n\n  try {\n    // == vert =====================================================================================\n    vertexShader = gl.createShader( gl.VERTEX_SHADER )!;\n\n    gl.shaderSource( vertexShader, vert );\n    gl.compileShader( vertexShader );\n\n    if ( !gl.getShaderParameter( vertexShader, gl.COMPILE_STATUS ) ) {\n      throw new Error( gl.getShaderInfoLog( vertexShader ) ?? undefined );\n    }\n\n    // == frag =====================================================================================\n    fragmentShader = gl.createShader( gl.FRAGMENT_SHADER )!;\n\n    gl.shaderSource( fragmentShader, frag );\n    gl.compileShader( fragmentShader );\n\n    if ( !gl.getShaderParameter( fragmentShader, gl.COMPILE_STATUS ) ) {\n      throw new Error( gl.getShaderInfoLog( fragmentShader ) ?? undefined );\n    }\n\n    // == program ==================================================================================\n    program = gl.createProgram()!;\n\n    gl.attachShader( program, vertexShader );\n    gl.attachShader( program, fragmentShader );\n\n    if ( tfVaryings ) {\n      gl.transformFeedbackVaryings(\n        program,\n        tfVaryings,\n        tfBufferMode ?? gl.SEPARATE_ATTRIBS,\n      );\n    }\n\n    gl.linkProgram( program );\n\n    return new Promise( ( resolve, reject ) => {\n      const update = () => {\n        if (\n          !extParallel ||\n          gl.getProgramParameter( program!, extParallel.COMPLETION_STATUS_KHR ) === true\n        ) {\n          if ( !gl.getProgramParameter( program!, gl.LINK_STATUS ) ) {\n            gl.deleteProgram( program );\n            reject( new Error( gl.getProgramInfoLog( program! ) ?? undefined ) );\n          } else {\n            resolve( program! );\n          }\n\n          return;\n        }\n\n        setTimeout( update, 10 );\n      };\n      update();\n    } );\n  } catch ( e ) {\n    gl.deleteProgram( program );\n\n    return Promise.reject( e );\n  } finally {\n    gl.deleteShader( fragmentShader );\n    gl.deleteShader( vertexShader );\n  }\n}\n", "import { shaderchunkPost, shaderchunkPre } from './shaderchunks';\nimport { lazyProgram } from './utils/lazyProgram';\n\nconst BLOCK_SIZE = 128;\n\nexport class Renderer {\n  public readonly gl: WebGL2RenderingContext;\n  public readonly blocksPerRender: number;\n\n  public readonly __extParallel: any;\n\n  public get framesPerRender(): number {\n    return BLOCK_SIZE * this.blocksPerRender;\n  }\n\n  private __offsetBuffer: WebGLBuffer;\n  private __tfBuffers: [ WebGLBuffer, WebGLBuffer ];\n  private __transformFeedback: WebGLTransformFeedback;\n\n  private __program: WebGLProgram | null;\n  private __programCue: WebGLProgram | null;\n\n  private __dstArrays: [ Float32Array, Float32Array ];\n\n  public constructor( gl: WebGL2RenderingContext, blocksPerRender: number ) {\n    this.blocksPerRender = blocksPerRender;\n\n    this.gl = gl;\n\n    this.__extParallel = gl.getExtension( 'KHR_parallel_shader_compile' );\n\n    this.__offsetBuffer = this.__createOffsetBuffer();\n    this.__tfBuffers = [\n      this.__createTFBuffer(),\n      this.__createTFBuffer(),\n    ];\n    this.__transformFeedback = this.__createTransformFeedback( this.__tfBuffers );\n\n    this.__dstArrays = [\n      new Float32Array( this.framesPerRender ),\n      new Float32Array( this.framesPerRender ),\n    ];\n\n    this.__program = null;\n    this.__programCue = null;\n  }\n\n  /**\n   * Dispose the renderer.\n   */\n  public dispose(): void {\n    const { gl } = this;\n\n    gl.deleteBuffer( this.__offsetBuffer );\n    gl.deleteBuffer( this.__tfBuffers[ 0 ] );\n    gl.deleteBuffer( this.__tfBuffers[ 1 ] );\n\n    gl.deleteTransformFeedback( this.__transformFeedback );\n\n    gl.deleteProgram( this.__program );\n    gl.deleteProgram( this.__programCue );\n  }\n\n  /**\n   * Compile given shader code and cue the shader.\n   */\n  public async compile( code: string ): Promise<void> {\n    const { gl } = this;\n\n    const program = await lazyProgram(\n      gl,\n      shaderchunkPre + code + shaderchunkPost,\n      '#version 300 es\\nvoid main(){discard;}',\n      {\n        extParallel: this.__extParallel,\n        tfVaryings: [ 'outL', 'outR' ],\n      },\n    ).catch( ( error ) => {\n      this.__programCue = null;\n      gl.deleteProgram( this.__programCue );\n\n      throw error;\n    } );\n\n    if ( program == null ) { return; }\n\n    this.__programCue = program;\n  }\n\n  /**\n   * Apply the cue shader.\n   *\n   * It does not do nothing when cue is not set.\n   * Feel free to mash this method for no reason.\n   */\n  public applyCue(): void {\n    const { gl } = this;\n\n    if ( this.__programCue == null ) { return; }\n\n    const prevProgram = this.__program;\n    this.__program = this.__programCue;\n\n    if ( prevProgram != null ) {\n      gl.deleteProgram( prevProgram );\n    }\n    this.__programCue = null;\n  }\n\n  /**\n   * Set an uniform1f to the current program.\n   */\n  public uniform1f( name: string, value: number ): void {\n    const { gl, __program: program } = this;\n    if ( program == null ) { return; }\n\n    const location = gl.getUniformLocation( program, name );\n\n    gl.useProgram( program );\n    gl.uniform1f( location, value );\n    gl.useProgram( null );\n  }\n\n  /**\n   * Set an uniform4f to the current program.\n   */\n  public uniform4f( name: string, ...value: [ number, number, number, number ] ): void {\n    const { gl, __program: program } = this;\n    if ( program == null ) { return; }\n\n    const location = gl.getUniformLocation( program, name );\n\n    gl.useProgram( program );\n    gl.uniform4f( location, ...value );\n    gl.useProgram( null );\n  }\n\n  /**\n   * Set a texture uniform to the current program.\n   */\n  public uniformTexture( name: string, unit: number, texture: WebGLTexture ): void {\n    const { gl, __program: program } = this;\n    if ( program == null ) { return; }\n\n    const location = gl.getUniformLocation( program, name );\n\n    gl.activeTexture( gl.TEXTURE0 + unit );\n    gl.bindTexture( gl.TEXTURE_2D, texture );\n\n    gl.useProgram( program );\n    gl.uniform1i( location, unit );\n    gl.useProgram( null );\n  }\n\n  /**\n   * Render and return a buffer.\n   */\n  public async render( first: number, count: number ): Promise<[ Float32Array, Float32Array ]> {\n    const { gl, __program: program } = this;\n    if ( program == null ) {\n      return this.__dstArrays;\n    }\n\n    // attrib\n    const attribLocation = gl.getAttribLocation( program, 'off' );\n\n    gl.bindBuffer( gl.ARRAY_BUFFER, this.__offsetBuffer );\n    gl.enableVertexAttribArray( attribLocation );\n    gl.vertexAttribPointer( attribLocation, 1, gl.FLOAT, false, 0, 0 );\n\n    // render\n    gl.useProgram( program );\n    gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, this.__transformFeedback );\n    gl.enable( gl.RASTERIZER_DISCARD );\n\n    gl.beginTransformFeedback( gl.POINTS );\n    gl.drawArrays( gl.POINTS, first, count );\n    gl.endTransformFeedback();\n\n    gl.disable( gl.RASTERIZER_DISCARD );\n    gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n    gl.useProgram( null );\n\n    // feedback\n    gl.bindBuffer( gl.ARRAY_BUFFER, this.__tfBuffers[ 0 ] );\n    gl.getBufferSubData(\n      gl.ARRAY_BUFFER,\n      0,\n      this.__dstArrays[ 0 ],\n      first,\n      count,\n    );\n    gl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n    gl.bindBuffer( gl.ARRAY_BUFFER, this.__tfBuffers[ 1 ] );\n    gl.getBufferSubData(\n      gl.ARRAY_BUFFER,\n      0,\n      this.__dstArrays[ 1 ],\n      first,\n      count,\n    );\n    gl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n    return this.__dstArrays;\n  }\n\n  private __createOffsetBuffer(): WebGLBuffer {\n    const { gl, framesPerRender } = this;\n\n    const array = new Float32Array( framesPerRender )\n      .map( ( _, i ) => i );\n\n    const buffer = gl.createBuffer()!;\n\n    gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n    gl.bufferData( gl.ARRAY_BUFFER, array, gl.STATIC_DRAW );\n    gl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n    return buffer;\n  }\n\n  private __createTFBuffer(): WebGLBuffer {\n    const { gl, framesPerRender } = this;\n\n    const buffer = gl.createBuffer()!;\n\n    gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      framesPerRender * Float32Array.BYTES_PER_ELEMENT,\n      gl.DYNAMIC_COPY,\n    );\n    gl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n    return buffer;\n  }\n\n  private __createTransformFeedback(\n    tfBuffers: [ WebGLBuffer, WebGLBuffer ]\n  ): WebGLTransformFeedback {\n    const { gl } = this;\n\n    const tf = gl.createTransformFeedback()!;\n\n    gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, tf );\n    gl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, 0, tfBuffers[ 0 ] );\n    gl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, 1, tfBuffers[ 1 ] );\n    gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n\n    return tf;\n  }\n}\n", "import { TextureStoreEntry, TextureStoreImageEntry, TextureStoreSampleEntry, TextureStoreWavetableEntry } from './TextureStoreEntry';\n\nexport class TextureStore {\n  public readonly gl: WebGL2RenderingContext;\n\n  private __textures: Map<string, TextureStoreEntry>;\n\n  public get textureIds(): IterableIterator<string> {\n    return this.__textures.keys();\n  }\n\n  public constructor( gl: WebGL2RenderingContext ) {\n    this.gl = gl;\n\n    this.__textures = new Map();\n  }\n\n  /**\n   * Dispose all the textures.\n   */\n  public dispose(): void {\n    const { gl } = this;\n\n    this.__textures.forEach( ( texture ) => {\n      gl.deleteTexture( texture.texture );\n    } );\n\n    this.__textures.clear();\n  }\n\n  /**\n   * Get a texture.\n   */\n  public get( id: string ): TextureStoreEntry | null {\n    return this.__textures.get( id ) ?? null;\n  }\n\n  /**\n   * Load a x-y wavetable and store as a texture.\n   * The buffer have to be encoded in F32, 2048 samples per cycle.\n   *\n   * The texture name is gonna be `wavetable_${ name }`.\n   */\n  public loadWavetable( id: string, inputBuffer: Float32Array ): TextureStoreWavetableEntry {\n    const frames = inputBuffer.length / 2048;\n    const buffer = new Float32Array( inputBuffer.length * 4 );\n\n    for ( let i = 0; i < inputBuffer.length; i ++ ) {\n      buffer[ i * 4 + 0 ] = inputBuffer[ i ];\n    }\n\n    const texture = this.__uploadTexture( 2048, frames, buffer );\n\n    const entry = {\n      type: 'wavetable' as const,\n      width: 2048,\n      height: frames,\n      texture,\n    };\n    this.__textures.set( id, entry );\n    return entry;\n  }\n\n  /**\n   * Load an image and store as a texture.\n   */\n  public loadImage( id: string, image: TexImageSource ): TextureStoreImageEntry {\n    const texture = this.__uploadImageSource( image );\n\n    const entry = {\n      type: 'image' as const,\n      width: image.width,\n      height: image.height,\n      texture,\n    };\n    this.__textures.set( id, entry );\n    return entry;\n  }\n\n  /**\n   * Load a sample and store as a texture.\n   */\n  public loadSample( id: string, audioBuffer: AudioBuffer ): TextureStoreSampleEntry {\n    const { sampleRate, duration } = audioBuffer;\n    const frames = audioBuffer.length;\n    const width = 2048;\n    const lengthCeiled = Math.ceil( frames / 2048.0 );\n    const height = lengthCeiled;\n\n    const buffer = new Float32Array( width * height * 4 );\n    const channels = audioBuffer.numberOfChannels;\n\n    const dataL = audioBuffer.getChannelData( 0 );\n    const dataR = audioBuffer.getChannelData( channels === 1 ? 0 : 1 );\n\n    for ( let i = 0; i < frames; i ++ ) {\n      buffer[ i * 4 + 0 ] = dataL[ i ];\n      buffer[ i * 4 + 1 ] = dataR[ i ];\n    }\n\n    const texture = this.__uploadTexture( width, height, buffer );\n\n    const entry = {\n      type: 'sample' as const,\n      width,\n      height,\n      sampleRate,\n      duration,\n      texture,\n    };\n    this.__textures.set( id, entry );\n    return entry;\n  }\n\n  /**\n   * Delete a texture entry.\n   *\n   * Returns a boolean that indicates whether the deletion is successful or not.\n   */\n  public delete( id: string ): boolean {\n    const { gl } = this;\n\n    const texture = this.__textures.get( id );\n    if ( texture == null ) { return false; }\n\n    gl.deleteTexture( texture.texture );\n    this.__textures.delete( id );\n\n    return true;\n  }\n\n  /**\n   * Create a texture and upload data.\n   */\n  private __uploadTexture(\n    width: number,\n    height: number,\n    source: Float32Array,\n  ): WebGLTexture {\n    const { gl } = this;\n\n    const texture = gl.createTexture()!;\n\n    gl.bindTexture( gl.TEXTURE_2D, texture );\n\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA32F,\n      width,\n      height,\n      0,\n      gl.RGBA,\n      gl.FLOAT,\n      source,\n    );\n\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    gl.bindTexture( gl.TEXTURE_2D, null );\n\n    return texture;\n  }\n\n  /**\n   * Create a texture and upload data.\n   */\n  private __uploadImageSource(\n    source: TexImageSource,\n  ): WebGLTexture {\n    const { gl } = this;\n\n    const texture = gl.createTexture()!;\n\n    gl.bindTexture( gl.TEXTURE_2D, texture );\n\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA8,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      source,\n    );\n\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR );\n\n    gl.bindTexture( gl.TEXTURE_2D, null );\n\n    return texture;\n  }\n}\n", "/**\n * `lerp`, or `mix`\n */\nexport function lerp( a: number, b: number, x: number ): number {\n  return a + ( b - a ) * x;\n}\n", "import { BeatManager } from './BeatManager';\nimport { BufferReaderNode } from './BufferReaderNode';\nimport { EventEmittable } from './utils/EventEmittable';\nimport { Renderer } from './Renderer';\nimport { TextureStore } from './TextureStore';\nimport { applyMixins } from './utils/applyMixins';\nimport { lerp } from './utils/lerp';\nimport { shaderchunkPreLines } from './shaderchunks';\n\nconst BLOCK_SIZE = 128;\n\ninterface WavenerdDeckProgram {\n  code: string;\n  requiredTextures: Set<string>;\n}\n\ninterface WavenerdDeckParamEntry {\n  name: string;\n  value: number;\n  factor: number;\n  target: number;\n}\n\nexport class WavenerdDeck {\n  /**\n   * Its host deck.\n   * It's highly recommended to connect the node of the host deck into the node of this deck, to ensure the timing consistency.\n   */\n  public hostDeck?: WavenerdDeck;\n\n  /**\n   * The count of latency blocks.\n   * Block == 128 samples.\n   * Lower == less latency.\n   */\n  public latencyBlocks: number;\n\n  /**\n   * Its current cue status.\n   * `'none'`: There is nothing in its current cue.\n   * `'ready'`: There is a cue shader and is ready to be applied.\n   * `'applying'`: There is a cue shader and is going to be applied in the next bar.\n   */\n  private __cueStatus: 'none' | 'compiling' | 'ready' | 'applying' = 'none';\n\n  /**\n   * Its current cue status.\n   * `'none'`: There is nothing in its current cue.\n   * `'ready'`: There is a cue shader and is ready to be applied.\n   * `'applying'`: There is a cue shader and is going to be applied in the next bar.\n   */\n  public get cueStatus(): 'none' | 'compiling' | 'ready' | 'applying' {\n    return this.__cueStatus;\n  }\n\n  /**\n   * Blocks per a render.\n   */\n  private __blocksPerRender: number;\n\n  /**\n   * Blocks per a render.\n   */\n  public get blocksPerRender(): number {\n    return this.__blocksPerRender;\n  }\n\n  /**\n   * Frames per a render\n   */\n  public get framesPerRender(): number {\n    return BLOCK_SIZE * this.__blocksPerRender;\n  }\n\n  /**\n   * Whether the wavenerd deck is playing or not.\n   */\n  private __isPlaying: boolean;\n\n  /**\n   * Whether the wavenerd deck is playing or not.\n   */\n  public get isPlaying(): boolean {\n    return this.hostDeck?.__isPlaying ?? this.__isPlaying;\n  }\n\n  /**\n   * Its current bpm.\n   */\n  public get bpm(): number {\n    return this.beatManager.bpm;\n  }\n  public set bpm( value: number ) {\n    this.beatManager.bpm = value;\n  }\n\n  /**\n   * Its last updated time.\n   * Intended to be used for calculation of deltaTime inside (@link __prepareBuffer).\n   */\n  private __lastUpdatedTime: number;\n\n  /**\n   * Its renderer.\n   */\n  private __renderer: Renderer;\n\n  /**\n   * Its last compile error happened in [[WavenerdDeck.compile]].\n   */\n  private __lastError: any;\n  public get lastError(): any {\n    return this.__lastError;\n  }\n\n  /**\n   * Its binded `AudioContext`.\n   */\n  private __audio: AudioContext;\n  public get audio(): AudioContext {\n    return this.__audio;\n  }\n\n  /**\n   * Its node of the AudioContext.\n   */\n  private __node: GainNode;\n  public get node(): GainNode {\n    return this.__node;\n  }\n\n  private __bufferReaderNode?: BufferReaderNode;\n  private __bufferWriteBlocks: number;\n\n  /**\n   * Offset of the block compared to {@link __bufferWriteBlocks} in terms of time.\n   * It is used to rewind the deck.\n   */\n  private __blockOffset: number;\n\n  /**\n   * Alias for the `audio.sampleRate` .\n   */\n  public get sampleRate(): number {\n    return this.__audio.sampleRate;\n  }\n\n  private __beatManager: BeatManager;\n  public get beatManager(): BeatManager {\n    const hostDeckBeatManager = this.hostDeck?.beatManager;\n    if ( hostDeckBeatManager ) {\n      return hostDeckBeatManager;\n    }\n\n    return this.__beatManager;\n  }\n\n  private __program: WavenerdDeckProgram | null;\n  private __programCue: WavenerdDeckProgram | null;\n  private __programSwapTime: number | null;\n\n  private __params = new Map<string, WavenerdDeckParamEntry>();\n  private get params(): Map<string, WavenerdDeckParamEntry> {\n    return this.__params;\n  }\n\n  private __selfTextureStore: TextureStore;\n  private get __textureStore(): TextureStore {\n    if ( this.hostDeck ) {\n      return this.hostDeck.__textureStore;\n    }\n\n    return this.__selfTextureStore;\n  }\n\n  /**\n   * Constructor of the WavenerdDeck.\n   */\n  public constructor( {\n    gl,\n    audio,\n    hostDeck,\n    latencyBlocks,\n    blocksPerRender,\n    bpm,\n  }: {\n    gl: WebGL2RenderingContext;\n    audio: AudioContext;\n    hostDeck?: WavenerdDeck;\n    latencyBlocks?: number;\n    blocksPerRender?: number;\n    bpm?: number;\n  } ) {\n    this.__isPlaying = false;\n\n    this.latencyBlocks = latencyBlocks ?? 16;\n    this.__blocksPerRender = blocksPerRender ?? 16;\n\n    // -- host deck --------------------------------------------------------------------------------\n    if ( hostDeck ) {\n      this.hostDeck = hostDeck;\n    }\n\n    // -- beat manager -----------------------------------------------------------------------------\n    this.__beatManager = new BeatManager();\n    this.__beatManager.bpm = bpm ?? 140;\n    this.__beatManager.on( 'changeBPM', ( { bpm } ) => {\n      this.__emit( 'changeBPM', { bpm } );\n    } );\n\n    this.__lastUpdatedTime = 0.0;\n\n    // TODO: temporary solution\n    if ( hostDeck ) {\n      hostDeck.on( 'rewind', () => {\n        this.rewind();\n      } );\n    }\n\n    // -- renderer ---------------------------------------------------------------------------------\n    this.__renderer = new Renderer( gl, this.blocksPerRender );\n\n    this.__selfTextureStore = new TextureStore( gl );\n\n    this.__program = null;\n    this.__programCue = null;\n    this.__programSwapTime = null;\n\n    // -- audio ------------------------------------------------------------------------------------\n    this.__audio = audio;\n    this.__node = audio.createGain();\n\n    BufferReaderNode.addModule( audio ).then( () => {\n      this.__bufferReaderNode = new BufferReaderNode( audio );\n      this.__bufferReaderNode.connect( this.__node );\n    } );\n\n    this.__bufferWriteBlocks = 0;\n    this.__blockOffset = 0;\n  }\n\n  /**\n   * Dispose this WavenerdDeck.\n   */\n  public dispose(): void {\n    this.__setCueStatus( 'none' );\n\n    this.__renderer.dispose();\n    this.__selfTextureStore.dispose();\n\n    this.__bufferReaderNode?.disconnect();\n  }\n\n  /**\n   * Play the deck.\n   */\n  public play(): void {\n    this.__isPlaying = true;\n\n    this.__emit( 'play' );\n  }\n\n  /**\n   * Pause the deck.\n   */\n  public pause(): void {\n    this.__isPlaying = false;\n\n    this.__emit( 'pause' );\n  }\n\n  /**\n   * Rewind the deck.\n   */\n  public rewind(): void {\n    this.__lastUpdatedTime = 0.0;\n    this.__blockOffset = this.__bufferWriteBlocks;\n\n    this.__beatManager.reset();\n\n    this.applyCueImmediately();\n\n    this.__emit( 'rewind' );\n  }\n\n  /**\n   * Compile given shader code and cue the shader.\n   */\n  public async compile( code: string ): Promise<void> {\n    this.__setCueStatus( 'compiling' );\n\n    await this.__renderer.compile( code ).catch( ( e ) => {\n      const error = this.__processErrorMessage( e );\n\n      this.__programCue = null;\n\n      this.__setCueStatus( 'none' );\n\n      this.__emit( 'error', { error } );\n      this.__lastError = error;\n\n      throw new Error( error ?? undefined );\n    } );\n\n    const requiredTextures = new Set<string>();\n\n    for ( const id of this.__textureStore.textureIds ) {\n      if ( code.search( id ) !== -1 ) {\n        requiredTextures.add( id );\n      }\n    }\n\n    this.__programCue = {\n      code,\n      requiredTextures,\n    };\n\n    this.__setCueStatus( 'ready' );\n\n    this.__emit( 'error', { error: null } );\n    this.__lastError = null;\n  }\n\n  /**\n   * Apply the cue shader after the bar ends.\n   */\n  public applyCue(): void {\n    if ( this.__cueStatus === 'ready' ) {\n      this.__setCueStatus( 'applying' );\n\n      this.__programSwapTime =\n        this.beatManager.time - this.beatManager.bar + this.beatManager.barSeconds;\n    }\n  }\n\n  /**\n   * Apply the cue shader immediately.\n   */\n  public applyCueImmediately(): void {\n    if ( this.__programCue != null ) {\n      this.__setCueStatus( 'none' );\n\n      this.__renderer.applyCue();\n\n      this.__program = this.__programCue;\n      this.__programCue = null;\n      this.__programSwapTime = null;\n    }\n  }\n\n  /**\n   * Set a uniform value.\n   */\n  public setParam( name: string, value: number, factor = 50.0 ): void {\n    const param = this.params.get( name );\n    if ( param ) {\n      param.target = value;\n      param.factor = factor;\n    } else {\n      this.params.set( name, { name, target: value, value, factor } );\n    }\n\n    this.__emit( 'setParam', { name, value, factor } );\n  }\n\n  /**\n   * Load a x-y wavetable and store as a uniform texture.\n   * The buffer have to be encoded in F32, 2048 samples per cycle.\n   */\n  public loadWavetable(\n    name: string,\n    inputBuffer: Float32Array,\n  ): void {\n    const id = `wavetable_${ name }`;\n    this.__textureStore.loadWavetable( id, inputBuffer );\n\n    this.__addRequiredTexture( id );\n\n    this.__emit( 'loadWavetable', { name } );\n  }\n\n  /**\n   * Delete a wavetable.\n   */\n  public deleteWavetable( name: string ): void {\n    const isSuccess = this.__textureStore.delete( `wavetable_${ name }` );\n\n    if ( isSuccess ) {\n      this.__emit( 'deleteWavetable', { name } );\n    }\n  }\n\n  /**\n   * Load an image and store as a uniform texture.\n   */\n  public loadImage(\n    name: string,\n    image: TexImageSource,\n  ): void {\n    const id = `image_${ name }`;\n    this.__textureStore.loadImage( id, image );\n\n    this.__addRequiredTexture( id );\n\n    this.__emit( 'loadImage', { name } );\n  }\n\n  /**\n   * Delete an image.\n   */\n  public deleteImage( name: string ): void {\n    const isSuccess = this.__textureStore.delete( `image_${ name }` );\n\n    if ( isSuccess ) {\n      this.__emit( 'deleteImage', { name } );\n    }\n  }\n\n  /**\n   * Load a sample and store as a uniform texture.\n   */\n  public async loadSample( name: string, inputBuffer: ArrayBuffer ): Promise<void> {\n    const audioBuffer = await this.__audio.decodeAudioData( inputBuffer );\n\n    const id = `sample_${ name }`;\n    const { duration, sampleRate } = this.__textureStore.loadSample( id, audioBuffer );\n\n    this.__addRequiredTexture( id );\n\n    this.__emit( 'loadSample', { name, duration, sampleRate } );\n  }\n\n  /**\n   * Delete a sample.\n   */\n  public deleteSample( name: string ): void {\n    const isSuccess = this.__textureStore.delete( `success_${ name }` );\n\n    if ( isSuccess ) {\n      this.__emit( 'deleteSample', { name } );\n    }\n  }\n\n  public async update(): Promise<void> {\n    const bufferReaderNode = this.__bufferReaderNode;\n    if ( bufferReaderNode == null ) { return; }\n\n    const { readBlocks } = bufferReaderNode;\n    const { sampleRate, blocksPerRender, framesPerRender } = this;\n\n    this.__bufferReaderNode?.setActive( this.isPlaying );\n\n    // -- early abort? -----------------------------------------------------------------------------\n    if ( !this.isPlaying ) { return; }\n\n    // -- choose a right write block ---------------------------------------------------------------\n    const blockAhead = this.__bufferWriteBlocks - readBlocks;\n\n    // we don't have to render this time\n    if ( blockAhead > this.latencyBlocks ) {\n      return;\n    }\n\n    // we're very behind\n    if ( blockAhead < 0 ) {\n      this.__bufferWriteBlocks = (\n        Math.floor( readBlocks / blocksPerRender ) + 1\n      ) * blocksPerRender;\n    }\n\n    const genTime = BLOCK_SIZE * ( this.__bufferWriteBlocks - this.__blockOffset ) / sampleRate;\n    this.beatManager.update( genTime );\n\n    // -- should I process the next program? -------------------------------------------------------\n    let beginNext = this.__programSwapTime != null\n      ? Math.floor( ( this.__programSwapTime - genTime ) * sampleRate )\n      : Infinity;\n    beginNext = Math.min( beginNext, framesPerRender );\n\n    // -- swap the program from first --------------------------------------------------------------\n    if ( beginNext < 0 ) {\n      this.applyCueImmediately();\n\n      beginNext = framesPerRender;\n    }\n\n    // -- render -----------------------------------------------------------------------------------\n    if ( this.__program ) {\n      await this.__prepareBuffer( 0, beginNext );\n    }\n\n    // -- render the next program from the mid of the block ----------------------------------------\n    if ( beginNext < framesPerRender && this.__programCue != null ) {\n      this.applyCueImmediately();\n\n      await this.__prepareBuffer( beginNext, framesPerRender - beginNext );\n    }\n\n    // -- update write blocks ----------------------------------------------------------------------\n    this.__bufferWriteBlocks += this.blocksPerRender;\n\n    // -- emit an event ----------------------------------------------------------------------------\n    this.__emit( 'update' );\n  }\n\n  private __addRequiredTexture( id: string ): void {\n    if ( this.__program && this.__program.code.search( id ) ) {\n      this.__program.requiredTextures.add( id );\n    }\n\n    if ( this.__programCue && this.__programCue.code.search( id ) ) {\n      this.__programCue.requiredTextures.add( id );\n    }\n  }\n\n  private async __prepareBuffer(\n    first: number,\n    count: number\n  ): Promise<void> {\n    const bufferReaderNode = this.__bufferReaderNode;\n    if ( bufferReaderNode == null ) { return; }\n\n    const {\n      time,\n      beatSeconds,\n      barSeconds,\n      sixteenBarSeconds,\n      beat,\n      bar,\n      sixteenBar,\n    } = this.beatManager;\n    const { sampleRate } = this;\n\n    const delta = time - this.__lastUpdatedTime;\n    this.__lastUpdatedTime = time;\n\n    // render\n    this.params.forEach( ( param ) => {\n      if ( param.factor <= 0.0 ) {\n        param.value = param.target;\n      } else {\n        param.value = lerp( param.target, param.value, Math.exp( -param.factor * delta ) );\n      }\n\n      this.__renderer.uniform4f(\n        'param_' + param.name,\n        param.target,\n        param.value,\n        param.factor,\n        0.0\n      );\n    } );\n\n    let textureUnit = 0;\n\n    const { requiredTextures } = this.__program!;\n\n    for ( const textureName of requiredTextures ) {\n      const textureEntry = this.__textureStore.get( textureName );\n\n      if ( textureEntry != null ) {\n        this.__renderer.uniformTexture(\n          textureName,\n          textureUnit,\n          textureEntry.texture,\n        );\n        textureUnit ++;\n\n        const meta = (\n          textureEntry.type === 'sample'\n            ? [\n              textureEntry.width,\n              textureEntry.height,\n              textureEntry.sampleRate,\n              textureEntry.duration,\n            ]\n            : [\n              textureEntry.width,\n              textureEntry.height,\n              0,\n              0,\n            ]\n        ) as [ number, number, number, number ];\n\n        this.__renderer.uniform4f(\n          textureName + '_meta',\n          ...meta,\n        );\n      }\n    }\n\n    this.__renderer.uniform1f( 'bpm', this.bpm );\n    this.__renderer.uniform1f( '_deltaSample', 1.0 / sampleRate );\n    this.__renderer.uniform4f(\n      'timeLength',\n      beatSeconds,\n      barSeconds,\n      sixteenBarSeconds,\n      1E16\n    );\n    this.__renderer.uniform4f(\n      '_timeHead',\n      beat,\n      bar,\n      sixteenBar,\n      time\n    );\n\n    const [ outL, outR ] = await this.__renderer.render( first, count );\n\n    bufferReaderNode.write(\n      0,\n      this.__bufferWriteBlocks,\n      first,\n      outL.subarray( first, first + count ),\n    );\n\n    bufferReaderNode.write(\n      1,\n      this.__bufferWriteBlocks,\n      first,\n      outR.subarray( first, first + count ),\n    );\n  }\n\n  private __setCueStatus( cueStatus: 'none' | 'compiling' | 'ready' | 'applying' ): void {\n    this.__cueStatus = cueStatus;\n    this.__emit( 'changeCueStatus', { cueStatus } );\n  }\n\n  private __processErrorMessage( error: any ): string | null {\n    const str: string | undefined = error?.message ?? error;\n    if ( !str ) { return null; }\n\n    return str.replace( /ERROR: (\\d+):(\\d+)/g, ( match, ...args ) => {\n      const line = parseInt( args[ 1 ] ) - shaderchunkPreLines + 1;\n      return `ERROR: ${ args[ 0 ] }:${ line }`;\n    } );\n  }\n}\n\nexport interface WavenerdDeck extends EventEmittable<{\n  update: void;\n  play: void;\n  pause: void;\n  rewind: void;\n  changeCueStatus: { cueStatus: 'none' | 'compiling' | 'ready' | 'applying' };\n  setParam: { name: string; value: number; factor: number };\n  loadWavetable: { name: string };\n  deleteWavetable: { name: string };\n  loadImage: { name: string };\n  deleteImage: { name: string };\n  loadSample: { name: string; sampleRate: number; duration: number };\n  deleteSample: { name: string };\n  changeBPM: { bpm: number };\n  error: { error: string | null };\n}> {}\napplyMixins( WavenerdDeck, [ EventEmittable ] );\n"],
  "mappings": "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",
  "names": []
}
