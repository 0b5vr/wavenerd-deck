export declare const shaderchunkPre = "#version 300 es\n\nprecision highp float;\n\n#define _PI 3.14159265359\n\nuniform float bpm;\nuniform vec4 timeLength;\nuniform float sampleRate;\nuniform float _deltaSample;\nuniform vec4 _timeHead;\n\nin float off;\n\nout float outL;\nout float outR;\n\nfloat paramFetch( vec4 param ) {\n  return mix( param.x, param.y, exp( -param.z * off * _deltaSample ) );\n}\n\nfloat wavetableNearest( sampler2D w, vec4 meta, vec2 position ) {\n  vec2 uv0 = fract( vec2(\n    position.x,\n    ( floor( fract( position.y ) * ( meta.y - 1.0 ) ) + 0.5 ) / meta.y\n  ) );\n  vec2 uv1 = uv0 + vec2( 0.0, 1.0 / meta.y );\n  return mix(\n    texture( w, uv0 ).x,\n    texture( w, uv1 ).x,\n    fract( position.y * ( meta.y - 1.0 ) )\n  );\n}\n\nfloat wavetableSinc( sampler2D w, vec4 meta, vec2 position ) {\n  float sum = 0.0;\n  float def = -fract( position.x * meta.x );\n  for ( int i = -5; i <= 5; i ++ ) {\n    float x = floor( position.x * meta.x + float( i ) ) / meta.x;\n    float deft = def + float( i );\n    vec2 uv0 = fract( vec2(\n      x,\n      ( floor( fract( position.y ) * ( meta.y - 1.0 ) ) + 0.5 ) / meta.y\n    ) );\n    vec2 uv1 = uv0 + vec2( 0.0, 1.0 / meta.y );\n    sum += mix(\n      texture( w, uv0 ).x,\n      texture( w, uv1 ).x,\n      fract( position.y * ( meta.y - 1.0 ) )\n    ) * min( sin( deft * _PI ) / deft / _PI, 1.0 );\n  }\n  return sum;\n}\n\nvec2 sampleNearest( sampler2D s, vec4 meta, float time ) {\n  if ( meta.w < time ) { return vec2( 0.0 ); }\n  float x = time / meta.x * meta.z;\n  vec2 uv = fract( vec2(\n    x,\n    floor( x ) / meta.y\n  ) ) + 0.5 / meta.xy;\n  return texture( s, uv ).xy;\n}\n\nvec2 sampleSinc( sampler2D s, vec4 meta, float time ) {\n  if ( meta.w < time ) { return vec2( 0.0 ); }\n  vec2 sum = vec2( 0.0 );\n  float def = -fract( time * meta.z );\n  for ( int i = -5; i <= 5; i ++ ) {\n    float x = floor( time * meta.z + float( i ) ) / meta.x;\n    float deft = def + float( i );\n    vec2 uv = fract( vec2(\n      x,\n      floor( x ) / meta.y\n    ) ) + 0.5 / meta.xy;\n    sum += texture( s, uv ).xy * min( sin( deft * _PI ) / deft / _PI, 1.0 );\n  }\n  return sum;\n}\n";
export declare const shaderchunkPreLines: number;
export declare const shaderchunkPost = "void main() {\n  vec2 out2 = mainAudio( mod( _timeHead + off * _deltaSample, timeLength ) );\n  outL = out2.x;\n  outR = out2.y;\n}";
